# Strategy Handler

## Overview
The `strategy.py` file is responsible for dynamically selecting and executing trading strategies based on user input. It imports the specified strategy, validates user-provided parameters, and runs the strategy on historical market data.

## Functionality
- **Dynamic Strategy Loading**: Automatically imports the required strategy module.
- **User-Defined Parameters**: Requests missing parameters from the user if not provided.
- **Trade Signal Generation**: Calls the `generate_signals()` function of the selected strategy.

## Functions

### `get_strategy(strategy_name, config)`
**Description**: Dynamically imports and initializes the specified strategy class with user-provided parameters.

**Parameters**:
- `strategy_name` (str): Name of the strategy to be used.
- `config` (dict): Dictionary of user-specified parameters for the strategy.

**Returns**:
- An instance of the selected strategy class, initialized with user-provided parameters.

---

### `strategy(strategy_name, market_data, config)`
**Description**: Runs the specified strategy on given market data.

**Parameters**:
- `strategy_name` (str): Name of the trading strategy to use.
- `market_data` (pd.DataFrame): Historical market data for backtesting.
- `config` (dict): Strategy-specific configuration settings.

**Returns**:
- `signals` (list): List of trade signals generated by the strategy.

## Usage Example
```python
import pandas as pd
from strategy import strategy

# Load historical market data
data = pd.read_csv('path_to_market_data.csv')

# Define strategy parameters
config = {"bollinger_period": 20, "bollinger_std": 2.0}

# Run the strategy
signals = strategy("bollinger_bands", data, config)
print(signals)
```

## Notes
- If an invalid strategy name is provided, the program will display an error and exit.
- If a required parameter is missing, the user is prompted to enter it manually.
- Strategies must be stored as separate modules under `src/strategies/` and contain a `Strategy` class.
